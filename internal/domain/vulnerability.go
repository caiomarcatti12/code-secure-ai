package domain

// Vulnerability represents a vulnerability identified by Dependency Check.
type Vulnerability struct {
    id            int
    packageName   string
    version       string
    severity      string
    description   string
    recommendation string
}

// NewVulnerability validates parameters and creates a new instance.
func NewVulnerability(id int, pkg, ver, sev, desc string) (Vulnerability, error) {
    if id < 0 {
        return Vulnerability{}, ErrInvalidParameter("id")
    }
    if pkg == "" {
        return Vulnerability{}, ErrInvalidParameter("packageName")
    }
    if ver == "" {
        return Vulnerability{}, ErrInvalidParameter("version")
    }
    if sev == "" {
        return Vulnerability{}, ErrInvalidParameter("severity")
    }
    if desc == "" {
        return Vulnerability{}, ErrInvalidParameter("description")
    }

    return Vulnerability{
        id:            id,
        packageName:   pkg,
        version:       ver,
        severity:      sev,
        description:   desc,
        recommendation: "",
    }, nil
}

func (v Vulnerability) ID() int              { return v.id }
func (v Vulnerability) PackageName() string  { return v.packageName }
func (v Vulnerability) Version() string      { return v.version }
func (v Vulnerability) Severity() string     { return v.severity }
func (v Vulnerability) Description() string  { return v.description }
func (v Vulnerability) Recommendation() string { return v.recommendation }

// WithRecommendation returns a new instance with recommendation set.
func (v Vulnerability) WithRecommendation(rec string) Vulnerability {
    if rec == "" {
        return v
    }
    newV := v
    newV.recommendation = rec
    return newV
}

type ErrInvalidParameter string

func (e ErrInvalidParameter) Error() string {
    return "invalid parameter: " + string(e)
}

