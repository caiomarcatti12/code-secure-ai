package application

import (
    "fmt"

    "github.com/yourusername/dependency-check-automation/internal/domain"
    "github.com/yourusername/dependency-check-automation/internal/infrastructure/ai"
    "github.com/yourusername/dependency-check-automation/internal/infrastructure/git"
    "github.com/yourusername/dependency-check-automation/internal/infrastructure/parser"
)

// VulnerabilityService defines our main use case.
type VulnerabilityService interface {
    ProcessVulnerabilitiesAndCreatePR(reportPath string) error
}

type vulnerabilityService struct {
    depParser  parser.DependencyCheckParser
    openAI     ai.OpenAIService
    gitService git.GitService
}

func NewVulnerabilityService(dp parser.DependencyCheckParser, aiService ai.OpenAIService, gitService git.GitService) VulnerabilityService {
    return &vulnerabilityService{
        depParser:  dp,
        openAI:     aiService,
        gitService: gitService,
    }
}

func (v *vulnerabilityService) ProcessVulnerabilitiesAndCreatePR(reportPath string) error {
    if reportPath == "" {
        return fmt.Errorf("reportPath cannot be empty")
    }

    vulns, err := v.depParser.Parse(reportPath)
    if err != nil {
        return fmt.Errorf("failed to parse report: %w", err)
    }

    if len(vulns) == 0 {
        return fmt.Errorf("no vulnerabilities found")
    }

    var fixedVulns []domain.Vulnerability
    for _, vuln := range vulns {
        rec, errGen := v.openAI.GenerateFix(vuln)
        if errGen != nil {
            continue
        }
        fixedVulns = append(fixedVulns, vuln.WithRecommendation(rec))
    }

    branchName := "auto/security-fixes"
    title := "[Automated] Security Fixes for Detected Vulnerabilities"

    description := "Below are the proposed fixes generated by OpenAI:\n\n"
    for _, fv := range fixedVulns {
        description += fmt.Sprintf("Vulnerability #%d - %s\n", fv.ID(), fv.PackageName())
        description += fmt.Sprintf("Severity: %s\n", fv.Severity())
        description += fmt.Sprintf("Recommended Fix:\n%s\n\n", fv.Recommendation())
    }

    ok, errPR := v.gitService.CreatePullRequest(branchName, title, description)
    if errPR != nil {
        return fmt.Errorf("failed to create pull request: %w", errPR)
    }

    if !ok {
        return fmt.Errorf("pull request creation was not successful")
    }

    return nil
}

